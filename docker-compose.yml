version: '3.8'

services:
  mysql:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password --host-cache-size=0 --lower_case_table_names=2
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: test
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
      - ./my-custom.cnf:/etc/mysql/conf.d/my-custom.cnf
    networks:
      tennus_net:
        ipv4_address: 172.45.0.2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  anaconda:
    build:
      context: ./nodo
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./notebooks:/notebooks
      - ./nodo:/nodo
    ports:
      - "8889:8888"
      - "8082:80"
    depends_on:
      - mysql
      - mongodb
    networks:
      tennus_net:
        ipv4_address: 172.45.0.3

  mongodb:
    image: mongo:4.4
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: tennus_data_analitica
    ports:
      - "27018:27017"
    volumes:
      - ./mongodb_data:/data/db
    networks:
      tennus_net:
        ipv4_address: 172.45.0.4
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - "8081:80"
    networks:
      tennus_net:
        ipv4_address: 172.45.0.5
    depends_on:
      - mysql
  
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8083:8081"
    environment:
     ME_CONFIG_MONGODB_SERVER: mongodb
    volumes:
    - ./start-mongo-express.sh:/start-mongo-express.sh
    command: ["/bin/bash", "/start-mongo-express.sh"]
    networks:
      tennus_net:
        ipv4_address: 172.45.0.6
    depends_on:
      - mongodb

networks:
  tennus_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.45.0.0/16

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka_broker_1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_broker_1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka_broker_1:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka_broker_1
    ports:
      - 8080:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka-broker-1
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka_broker_1:29092

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: kafka-connect
    depends_on:
      - kafka_broker_1
    ports:
      - "8084:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka_broker_1:29092"
      CONNECT_GROUP_ID: "kafka-connect-group"
      GROUP_ID: "kafka-connect"
      restart: always
      mem_limit: 2g
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "status_topic"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONFIG_STORAGE_TOPIC: "connect-configs"
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_TOPIC: "connect-status"
      STATUS_STORAGE_REPLICATION_FACTOR: 1

volumes:
  mysql_data:
  mongodb_data: